!function(require, directRequire){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getCompiledResult=exports.SIGNATURE_FILE_NAME=void 0;const tslib_1=require("tslib"),fs_extra_1=tslib_1.__importDefault(require("fs-extra")),compile_1=require("../core/compile"),config_1=require("../config"),error_1=require("../utils/error"),locales_1=tslib_1.__importDefault(require("../utils/locales/locales")),cache_1=require("../utils/cache"),jszip_1=tslib_1.__importDefault(require("jszip")),path_1=tslib_1.__importDefault(require("path")),filterUnusedFile_1=require("./utils/filterUnusedFile");async function getCompiledResult(e,t){const{test:r,project:i,setting:o={},version:s="",onProgressUpdate:l=function(e){console.log(""+e)},threads:a=0,includedMap:_=!1,allowIgnoreUnusedFiles:n=!0}=e;if(process.env.COMPILE_THREADS=a.toString(),!s)throw new error_1.CodeError(locales_1.default.config.PARAM_ERROR.format("upload","version"),config_1.PARAM_ERROR);if(!i)throw new error_1.CodeError(locales_1.default.config.PARAM_ERROR.format("upload","project"),config_1.PARAM_ERROR);cache_1.cacheManager.clean();let c=await(0,compile_1.compile)(i,{setting:o,onProgressUpdate:l});!1!==n&&(c=await(0,filterUnusedFile_1.filterUnusedFile)(!!r,i,c));const u={};if(Object.keys(c).sort().forEach(e=>{e.endsWith("js.map")&&!_||(u[e]=c[e])}),t){const e=new jszip_1.default;Object.keys(u).forEach(t=>{e.folder(path_1.default.dirname(t)).file(path_1.default.basename(t),u[t])});const r=await e.generateAsync({type:"nodebuffer"});fs_extra_1.default.ensureDirSync(path_1.default.dirname(t)),fs_extra_1.default.writeFileSync(t,r)}return u}exports.SIGNATURE_FILE_NAME="ci.signature",exports.getCompiledResult=getCompiledResult;
}(require("licia/lazyImport")(require), require)