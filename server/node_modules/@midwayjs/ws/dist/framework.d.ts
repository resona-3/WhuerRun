/// <reference types="node" />
/// <reference types="node" />
import { BaseFramework, CommonMiddlewareUnion, ContextMiddlewareManager, IMidwayBootstrapOptions, MidwayFrameworkType } from '@midwayjs/core';
import * as http from 'http';
import { Application, Context, IMidwayWSApplication, IMidwayWSConfigurationOptions, NextFunction } from './interface';
export declare class MidwayWSFramework extends BaseFramework<Application, Context, IMidwayWSConfigurationOptions> {
    server: http.Server;
    protected heartBeatInterval: NodeJS.Timeout;
    protected connectionMiddlewareManager: ContextMiddlewareManager<Context, unknown, unknown>;
    configure(): IMidwayWSConfigurationOptions;
    applicationInitialize(options: IMidwayBootstrapOptions): void;
    app: IMidwayWSApplication;
    protected afterContainerReady(options: Partial<IMidwayBootstrapOptions>): Promise<void>;
    run(): Promise<void>;
    protected beforeStop(): Promise<void>;
    getFrameworkType(): MidwayFrameworkType;
    private loadMidwayController;
    private addNamespace;
    private bindSocketResponse;
    getFrameworkName(): string;
    useConnectionMiddleware(middleware: CommonMiddlewareUnion<Context, NextFunction, undefined>): void;
    getConnectionMiddleware(): ContextMiddlewareManager<Context, NextFunction, undefined>;
    startHeartBeat(): void;
}
//# sourceMappingURL=framework.d.ts.map