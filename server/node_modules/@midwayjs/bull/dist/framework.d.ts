import { BaseFramework, IMidwayBootstrapOptions, ILogger } from '@midwayjs/core';
import { Application, Context, IProcessor, IQueue, IQueueManager } from './interface';
import { Job, JobOptions, QueueOptions } from 'bull';
import Bull = require('bull');
export declare class BullQueue extends Bull implements IQueue<Job> {
    constructor(queueName: string, queueOptions: QueueOptions);
    addJobToQueue(data: any, options?: JobOptions): Promise<Job>;
    /**
     * @deprecated use addJobToQueue instead
     */
    runJob(data: any, options?: JobOptions): Promise<Job>;
    getQueueName(): string;
}
export declare class BullFramework extends BaseFramework<Application, Context, any> implements IQueueManager<BullQueue, Job> {
    private bullDefaultQueueConfig;
    private bullDefaultConcurrency;
    private bullClearRepeatJobWhenStart;
    private queueMap;
    protected bullLogger: ILogger;
    applicationInitialize(options: IMidwayBootstrapOptions): Promise<void>;
    loadConfig(): void;
    configure(): any;
    getFrameworkName(): string;
    run(): Promise<void>;
    protected beforeStop(): Promise<void>;
    createQueue(name: string, queueOptions?: QueueOptions): BullQueue;
    getQueue(name: string): BullQueue;
    ensureQueue(name: string, queueOptions?: QueueOptions): BullQueue;
    getQueueList(): BullQueue[];
    addProcessor(processor: new (...args: any[]) => IProcessor, queueName: string | BullQueue, concurrency?: number): Promise<void>;
    addJobToQueue(queueName: string, jobData: any, options?: JobOptions): Promise<Job | undefined>;
    /**
     * @deprecated use addJob instead
     */
    runJob(queueName: string, jobData: any, options?: JobOptions): Promise<Job | undefined>;
    getJob(queueName: string, jobName: string): Promise<Job>;
}
//# sourceMappingURL=framework.d.ts.map