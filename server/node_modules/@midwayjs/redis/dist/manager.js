"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisService = exports.RedisServiceFactory = void 0;
const core_1 = require("@midwayjs/core");
const ioredis_1 = require("ioredis");
const assert = require("assert");
let RedisServiceFactory = class RedisServiceFactory extends core_1.ServiceFactory {
    async init() {
        await this.initClients(this.redisConfig);
    }
    async createClient(config) {
        let client;
        if (config.cluster === true) {
            assert(config.nodes && config.nodes.length !== 0, '[midway:redis] cluster nodes configuration is required when use cluster redis');
            config.nodes.forEach(client => {
                assert(client.host && client.port, `[midway:redis] 'host: ${client.host}', 'port: ${client.port}' are required on config`);
            });
            this.logger.info('[midway:redis] cluster connecting');
            client = new ioredis_1.default.Cluster(config.nodes, config);
        }
        else if (config.sentinels) {
            assert(config.sentinels && config.sentinels.length !== 0, '[midway:redis] sentinels configuration is required when use redis sentinel');
            config.sentinels.forEach(sentinel => {
                assert(sentinel.host && sentinel.port, `[midway:redis] 'host: ${sentinel.host}', 'port: ${sentinel.port}' are required on config`);
            });
            this.logger.info('[midway:redis] sentinel connecting start');
            client = new ioredis_1.default(config);
        }
        else {
            assert(config.host && config.port, `[midway:redis] 'host: ${config.host}', 'port: ${config.port}' are required on config`);
            this.logger.info('[midway:redis] server connecting redis://:***@%s:%s', config.host, config.port);
            client = new ioredis_1.default(config);
        }
        await new Promise((resolve, reject) => {
            client.on('connect', () => {
                this.logger.info('[midway:redis] client connect success');
                resolve();
            });
            client.on('error', err => {
                this.logger.error('[midway:redis] client error: %s', err);
                reject(err);
            });
        });
        return client;
    }
    getName() {
        return 'redis';
    }
    async destroyClient(redisInstance) {
        try {
            if (redisInstance) {
                const canQuit = !['end', 'close'].includes(redisInstance.status);
                if (canQuit) {
                    await redisInstance.quit();
                }
            }
        }
        catch (error) {
            this.logger.error('[midway:redis] Redis quit failed.', error);
        }
    }
};
__decorate([
    (0, core_1.Config)('redis'),
    __metadata("design:type", Object)
], RedisServiceFactory.prototype, "redisConfig", void 0);
__decorate([
    (0, core_1.Init)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], RedisServiceFactory.prototype, "init", null);
__decorate([
    (0, core_1.Logger)('coreLogger'),
    __metadata("design:type", Object)
], RedisServiceFactory.prototype, "logger", void 0);
RedisServiceFactory = __decorate([
    (0, core_1.Provide)(),
    (0, core_1.Scope)(core_1.ScopeEnum.Singleton)
], RedisServiceFactory);
exports.RedisServiceFactory = RedisServiceFactory;
let RedisService = class RedisService {
    async init() {
        var _a, _b;
        this.instance = this.serviceFactory.get(((_b = (_a = this.serviceFactory).getDefaultClientName) === null || _b === void 0 ? void 0 : _b.call(_a)) || 'default');
        if (!this.instance) {
            throw new core_1.MidwayCommonError('redis default instance not found.');
        }
    }
};
__decorate([
    (0, core_1.Inject)(),
    __metadata("design:type", RedisServiceFactory)
], RedisService.prototype, "serviceFactory", void 0);
__decorate([
    (0, core_1.Init)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], RedisService.prototype, "init", null);
RedisService = __decorate([
    (0, core_1.Provide)(),
    (0, core_1.Scope)(core_1.ScopeEnum.Singleton)
], RedisService);
exports.RedisService = RedisService;
(0, core_1.delegateTargetAllPrototypeMethod)(RedisService, ioredis_1.default);
RedisService.prototype.defineCommand = function (name, definition) {
    this.instance.defineCommand(name, definition);
    (0, core_1.delegateTargetMethod)(RedisService, [name]);
};
//# sourceMappingURL=manager.js.map